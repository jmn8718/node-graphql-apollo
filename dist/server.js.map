{"version":3,"sources":["../src/server.js"],"names":["require","config","app","PORT","process","env","set","ENV","token","req","id","use","res","next","v4","json","urlencoded","extended","executableSchema","typeDefs","resolvers","schema","context","user","request","headers","Authorization","undefined","endpointURL","err","Error","status","message","error"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AAKA;;AAEA;;;;AACA;;;;AAEA;;;;;;AAEAA,QAAQ,QAAR,EAAkBC,MAAlB;AACAD,QAAQ,MAAR;;AAGA,IAAME,MAAM,wBAAZ;;AAEA,IAAMC,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AACAD,IAAII,GAAJ,CAAQ,MAAR,EAAgBH,IAAhB;;AAEA,IAAIC,QAAQC,GAAR,CAAYE,GAAZ,KAAoB,aAAxB,EAAuC;AACrC,mBAAOC,KAAP,CAAa,IAAb,EAAmB,UAACC,GAAD;AAAA,WAASA,IAAIC,EAAb;AAAA,GAAnB;;AAEAR,MAAIS,GAAJ,CAAQ,UAACF,GAAD,EAAMG,GAAN,EAAWC,IAAX,EAAoB;AAC1BJ,QAAIC,EAAJ,GAAS,mBAAKI,EAAL,EAAT;AACAD;AACD,GAHD;AAIAX,MAAIS,GAAJ,CAAQ,sBAAO,gHAAP,CAAR;AACD;;AAED;AACAT,IAAIS,GAAJ,CAAQ,qBAAWI,IAAX,CAAgB,EAAhB,CAAR;AACAb,IAAIS,GAAJ,CAAQ,qBAAWK,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA,IAAIb,QAAQC,GAAR,CAAYE,GAAZ,KAAoB,aAAxB,EAAuC;AACrCL,MAAIS,GAAJ,CAAQ,qBAAR;AACD;;AAED,IAAMO,mBAAmB,wCAAqB;AAC5CC,4BAD4C;AAE5CC;AAF4C,CAArB,CAAzB;;AAKAlB,IAAIS,GAAJ,CAAQ,UAAR,EAAoB,0CAAe;AAAA,SAAY;AAC7CU,YAAQH,gBADqC;AAE7CI,aAAS;AACPC,YAAOC,QAAQC,OAAR,IAAmBD,QAAQC,OAAR,CAAgBC,aAApC,IAAsDC;AADrD;AAFoC,GAAZ;AAAA,CAAf,CAApB;;AAOAzB,IAAIS,GAAJ,CAAQ,WAAR,EAAqB,2CAAgB;AACnCiB,eAAa;AADsB,CAAhB,CAArB;;AAIA1B,IAAIS,GAAJ,CAAQ,MAAR;;AAEA;AACAT,IAAIS,GAAJ,CAAQ,UAACF,GAAD,EAAMG,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMgB,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAlB,OAAKgB,GAAL;AACD,CAJD;;AAMA;;AAEA;AACA;AACA,IAAIzB,QAAQC,GAAR,CAAYE,GAAZ,KAAoB,aAAxB,EAAuC;AACrCL,MAAIS,GAAJ,CAAQ,UAACkB,GAAD,EAAMpB,GAAN,EAAWG,GAAX,EAAmB;AACzBA,QAAImB,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAnB,QAAIG,IAAJ,CAAS;AACPiB,eAASH,IAAIG,OADN;AAEPC,aAAOJ;AAFA,KAAT;AAID,GAND;AAOD;;AAED;AACA;AACA3B,IAAIS,GAAJ,CAAQ,UAACkB,GAAD,EAAMpB,GAAN,EAAWG,GAAX,EAAmB;AACzBA,MAAImB,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAnB,MAAIG,IAAJ,CAAS;AACPiB,aAASH,IAAIG;AADN,GAAT;AAGD,CALD;;kBAOe9B,G","file":"server.js","sourcesContent":["import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport uuid from 'node-uuid';\n\nimport {\n  graphqlExpress,\n  graphiqlExpress,\n} from 'graphql-server-express';\n\nimport { makeExecutableSchema } from 'graphql-tools';\n\nimport Schema from './data/schema';\nimport Resolvers from './data/resolvers';\n\nimport api from './api';\n\nrequire('dotenv').config();\nrequire('./db');\n\n\nconst app = express();\n\nconst PORT = process.env.PORT || 5000;\napp.set('port', PORT);\n\nif (process.env.ENV === 'development') {\n  morgan.token('id', (req) => req.id);\n\n  app.use((req, res, next) => {\n    req.id = uuid.v4();\n    next();\n  });\n  app.use(morgan(':id :remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms'));\n}\n\n// parse body params and attache them to req.body\napp.use(bodyParser.json({}));\napp.use(bodyParser.urlencoded({ extended: true }));\n\nif (process.env.ENV === 'development') {\n  app.use(cors());\n}\n\nconst executableSchema = makeExecutableSchema({\n  typeDefs: Schema,\n  resolvers: Resolvers,\n});\n\napp.use('/graphql', graphqlExpress(request => ({\n  schema: executableSchema,\n  context: {\n    user: (request.headers && request.headers.Authorization) || undefined,\n  },\n})));\n\napp.use('/graphiql', graphiqlExpress({\n  endpointURL: '/graphql',\n}));\n\napp.use('/api', api);\n\n// catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (process.env.ENV === 'development') {\n  app.use((err, req, res) => {\n    res.status(err.status || 500);\n    res.json({\n      message: err.message,\n      error: err,\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res) => {\n  res.status(err.status || 500);\n  res.json({\n    message: err.message,\n  });\n});\n\nexport default app;\n"]}