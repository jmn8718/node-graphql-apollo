{"version":3,"sources":["../../src/models/user.js"],"names":["Promise","require","UserSchema","Schema","name","type","String","default","email","required","unique","validate","trim","username","password","User","model","getUserById","id","callback","findById","getUserByUsername","query","findOne","addUser","newUser","genSalt","err","salt","hash","save","deleteUser","user","remove","result","console","log","Error"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;AAEA;AACA,IAAMC,aAAa,mBAASC,MAAT,CAAgB;AACjCC,QAAM;AACJC,UAAMC,MADF;AAEJC,aAAS;AAFL,GAD2B;AAKjCC,SAAO;AACLH,UAAMC,MADD;AAELG,cAAU,IAFL;AAGLC,YAAQ,IAHH;AAILC,cAAU,oBAAW,eAAX,CAJL;AAKLC,UAAM;AALD,GAL0B;AAYjCC,YAAU;AACRR,UAAMC,MADE;AAERG,cAAU,IAFF;AAGRC,YAAQ,IAHA;AAIRE,UAAM;AAJE,GAZuB;AAkBjCE,YAAU;AACRT,UAAMC,MADE;AAERG,cAAU,IAFF;AAGRG,UAAM;AAHE;AAlBuB,CAAhB,CAAnB;;AAyBA,IAAMG,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuBd,UAAvB,CAAb;;kBAEea,I;AAER,IAAME,oCAAc,SAAdA,WAAc,CAACC,EAAD,EAAKC,QAAL,EAAkB;AAC3CJ,OAAKK,QAAL,CAAcF,EAAd,EAAkBC,QAAlB;AACD,CAFM;;AAIA,IAAME,gDAAoB,SAApBA,iBAAoB,CAACR,QAAD,EAAWM,QAAX,EAAwB;AACvD,MAAMG,QAAQ;AACZT,cAAUA;AADE,GAAd;AAGAE,OAAKQ,OAAL,CAAaD,KAAb,EAAoBH,QAApB;AACD,CALM;;AAOA,IAAMK,4BAAU,SAAVA,OAAU,CAACC,OAAD,EAAUN,QAAV,EAAuB;AAC5C,qBAAOO,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChC,uBAAOC,IAAP,CAAYJ,QAAQX,QAApB,EAA8Bc,IAA9B,EAAoC,UAACD,GAAD,EAAME,IAAN,EAAe;AACjD,UAAIF,GAAJ,EAAS;AACP,cAAMA,GAAN;AACD;AACDF,cAAQX,QAAR,GAAmBe,IAAnB;AACAJ,cAAQK,IAAR,CAAaX,QAAb;AACD,KAND;AAOD,GARD;AASD,CAVM;;AAYA,IAAMY,kCAAa,SAAbA,UAAa,CAAClB,QAAD,EAAWM,QAAX,EAAwB;AAChD,MAAMG,QAAQ;AACZT,cAAUA;AADE,GAAd;AAGAE,OAAKQ,OAAL,CAAaD,KAAb,EAAoB,UAACK,GAAD,EAAMK,IAAN,EAAe;AACjC,QAAIL,GAAJ,EAAS;AACPR,eAASQ,GAAT;AACD;AACD,QAAIK,IAAJ,EAAU;AACRA,WAAKC,MAAL,CAAY,UAACN,GAAD,EAAMO,MAAN,EAAiB;AAC3B,YAAIP,GAAJ,EAAS;AACPR,mBAASQ,GAAT;AACD;AACDQ,gBAAQC,GAAR,CAAYF,MAAZ;AACAf,iBAASQ,GAAT,EAAcK,IAAd;AACD,OAND;AAOD,KARD,MAQO;AACLb,eAAS,IAAIkB,KAAJ,CAAU,gBAAV,CAAT;AACD;AACF,GAfD;AAgBD,CApBM","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport isEmail from 'validator/lib/isEmail';\n\n// Use bluebird\nmongoose.Promise = require('bluebird');\n\n// User Schema\nconst UserSchema = mongoose.Schema({\n  name: {\n    type: String,\n    default: '',\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: [ isEmail, 'Invalid email'],\n    trim: true,\n  },\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nexport default User;\n\nexport const getUserById = (id, callback) => {\n  User.findById(id, callback);\n}\n\nexport const getUserByUsername = (username, callback) => {\n  const query = {\n    username: username,\n  };\n  User.findOne(query, callback);\n}\n\nexport const addUser = (newUser, callback) => {\n  bcrypt.genSalt(10, (err, salt) => {\n    bcrypt.hash(newUser.password, salt, (err, hash) => {\n      if (err) {\n        throw err;\n      }\n      newUser.password = hash;\n      newUser.save(callback);\n    });\n  });\n}\n\nexport const deleteUser = (username, callback) => {\n  const query = {\n    username: username,\n  };\n  User.findOne(query, (err, user) => {\n    if (err) {\n      callback(err);\n    }\n    if (user) {\n      user.remove((err, result) => {\n        if (err) {\n          callback(err);\n        }\n        console.log(result);\n        callback(err, user);\n      });\n    } else {\n      callback(new Error('User not found'));\n    }\n  });\n}\n"]}