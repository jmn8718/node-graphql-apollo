{"version":3,"sources":["../../src/models/user.js"],"names":["Promise","require","UserSchema","Schema","name","type","String","default","email","required","unique","validate","trim","username","password","User","model","getUserById","id","callback","findById","getUserByUsername","query","findOne","addUser","newUser","genSalt","err","salt","hash","err2","save","deleteUser","user","remove","Error"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;AAEA;AACO,IAAMC,kCAAa,mBAASC,MAAT,CAAgB;AACxCC,QAAM;AACJC,UAAMC,MADF;AAEJC,aAAS;AAFL,GADkC;AAKxCC,SAAO;AACLH,UAAMC,MADD;AAELG,cAAU,IAFL;AAGLC,YAAQ,IAHH;AAILC,cAAU,oBAAU,eAAV,CAJL;AAKLC,UAAM;AALD,GALiC;AAYxCC,YAAU;AACRR,UAAMC,MADE;AAERG,cAAU,IAFF;AAGRC,YAAQ,IAHA;AAIRE,UAAM;AAJE,GAZ8B;AAkBxCE,YAAU;AACRT,UAAMC,MADE;AAERG,cAAU,IAFF;AAGRG,UAAM;AAHE;AAlB8B,CAAhB,CAAnB;;AAyBP,IAAMG,OAAO,mBAASC,KAAT,CAAe,MAAf,EAAuBd,UAAvB,CAAb;;kBAEea,I;AAER,IAAME,oCAAc,SAAdA,WAAc,CAACC,EAAD,EAAKC,QAAL,EAAkB;AAC3CJ,OAAKK,QAAL,CAAcF,EAAd,EAAkBC,QAAlB;AACD,CAFM;;AAIA,IAAME,gDAAoB,SAApBA,iBAAoB,CAACR,QAAD,EAAWM,QAAX,EAAwB;AACvD,MAAMG,QAAQ;AACZT;AADY,GAAd;AAGAE,OAAKQ,OAAL,CAAaD,KAAb,EAAoBH,QAApB;AACD,CALM;;AAOA,IAAMK,4BAAU,SAAVA,OAAU,CAACC,OAAD,EAAUN,QAAV,EAAuB;AAC5C,qBAAOO,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChC,QAAID,GAAJ,EAAS;AACPR,eAASQ,GAAT;AACD;AACD,uBAAOE,IAAP,CAAYJ,QAAQX,QAApB,EAA8Bc,IAA9B,EAAoC,UAACE,IAAD,EAAOD,IAAP,EAAgB;AAClD,UAAIC,IAAJ,EAAU;AACRX,iBAASW,IAAT;AACD;AACDL,cAAQX,QAAR,GAAmBe,IAAnB,CAJkD,CAIzB;AACzBJ,cAAQM,IAAR,CAAaZ,QAAb;AACD,KAND;AAOD,GAXD;AAYD,CAbM;;AAeA,IAAMa,kCAAa,SAAbA,UAAa,CAACnB,QAAD,EAAWM,QAAX,EAAwB;AAChD,MAAMG,QAAQ;AACZT;AADY,GAAd;AAGAE,OAAKQ,OAAL,CAAaD,KAAb,EAAoB,UAACK,GAAD,EAAMM,IAAN,EAAe;AACjC,QAAIN,GAAJ,EAAS;AACPR,eAASQ,GAAT;AACD;AACD,QAAIM,IAAJ,EAAU;AACRA,WAAKC,MAAL,CAAY,UAACJ,IAAD,EAAU;AACpB,YAAIA,IAAJ,EAAU;AACRX,mBAASW,IAAT;AACD;AACDX,iBAASW,IAAT,EAAeG,IAAf;AACD,OALD;AAMD,KAPD,MAOO;AACLd,eAAS,IAAIgB,KAAJ,CAAU,gBAAV,CAAT;AACD;AACF,GAdD;AAeD,CAnBM","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport isEmail from 'validator/lib/isEmail';\n\n// Use bluebird\nmongoose.Promise = require('bluebird');\n\n// User Schema\nexport const UserSchema = mongoose.Schema({\n  name: {\n    type: String,\n    default: '',\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: [isEmail, 'Invalid email'],\n    trim: true,\n  },\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nexport default User;\n\nexport const getUserById = (id, callback) => {\n  User.findById(id, callback);\n};\n\nexport const getUserByUsername = (username, callback) => {\n  const query = {\n    username,\n  };\n  User.findOne(query, callback);\n};\n\nexport const addUser = (newUser, callback) => {\n  bcrypt.genSalt(10, (err, salt) => {\n    if (err) {\n      callback(err);\n    }\n    bcrypt.hash(newUser.password, salt, (err2, hash) => {\n      if (err2) {\n        callback(err2);\n      }\n      newUser.password = hash; // eslint-disable-line no-param-reassign\n      newUser.save(callback);\n    });\n  });\n};\n\nexport const deleteUser = (username, callback) => {\n  const query = {\n    username,\n  };\n  User.findOne(query, (err, user) => {\n    if (err) {\n      callback(err);\n    }\n    if (user) {\n      user.remove((err2) => {\n        if (err2) {\n          callback(err2);\n        }\n        callback(err2, user);\n      });\n    } else {\n      callback(new Error('User not found'));\n    }\n  });\n};\n"]}