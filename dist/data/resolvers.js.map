{"version":3,"sources":["../../src/data/resolvers.js"],"names":["resolveFunctions","Query","User","root","args","Promise","resolve","reject","username","err","user","Users","find","users","Place","roots","id","place","Places","Mutation","createUser","newUser","deleteUser","context","token","Error","decoded","err2","authenticateUser","password","isMatch","access_token","token_type","expires_in","process","env","EXPIRES_IN","createPlace","newPlace","location","lat","lng","err3"],"mappings":"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","file":"resolvers.js","sourcesContent":["import User, { getUserByUsername, addUser, deleteUser } from '../models/user';\nimport Place, { addPlace, getPlaceById } from '../models/place';\nimport { createToken, comparePassword, verifyToken } from '../utils';\n\nconst resolveFunctions = {\n  Query: {\n    User(root, args) {\n      return new Promise((resolve, reject) => {\n        getUserByUsername(args.username, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(user);\n        });\n      });\n    },\n    Users() {\n      return new Promise((resolve, reject) => {\n        User.find({}, (err, users) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(users);\n        });\n      });\n    },\n    Place(roots, args) {\n      return new Promise((resolve, reject) => {\n        getPlaceById(args.id, (err, place) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(place);\n        });\n      });\n    },\n    Places() {\n      return new Promise((resolve, reject) => {\n        Place.find({}, (err, users) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(users);\n        });\n      });\n    },\n  },\n  Mutation: {\n    createUser(root, args) {\n      const newUser = new User(args);\n      return new Promise((resolve, reject) => {\n        addUser(newUser, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(user);\n        });\n      });\n    },\n    deleteUser(root, args, context) {\n      if (!context.token) {\n        return new Error('No token provided');\n      }\n      return new Promise((resolve, reject) => {\n        verifyToken(context.token, (err, decoded) => {\n          if (err) {\n            reject(err);\n          } else if (decoded.username === args.username) {\n            deleteUser(args.username, (err2, user) => {\n              if (err2) {\n                reject(err2);\n              }\n              resolve(user);\n            });\n          } else {\n            reject(new Error('Unauthorized operation'));\n          }\n        });\n      });\n    },\n    authenticateUser(root, args) {\n      return new Promise((resolve, reject) => {\n        getUserByUsername(args.username, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n          comparePassword(args.password, user.password, (err2, isMatch) => {\n            if (err2) {\n              reject(err2);\n            }\n            if (!isMatch) {\n              reject(new Error('Wrong password'));\n            }\n            resolve({\n              access_token: createToken(user),\n              token_type: 'jwt',\n              expires_in: process.env.EXPIRES_IN,\n              user,\n            });\n          });\n        });\n      });\n    },\n    createPlace(root, args, context) {\n      if (!context.token) {\n        return new Error('No token provided');\n      }\n      return new Promise((resolve, reject) => {\n        verifyToken(context.token, (err, decoded) => {\n          if (err) {\n            reject(err);\n          }\n          getUserByUsername(decoded.username, (err2, user) => {\n            if (err2) {\n              reject(err2);\n            }\n            const newPlace = new Place(args);\n            newPlace.location = {\n              lat: args.lat || 0,\n              lng: args.lng || 0,\n            };\n            newPlace.user = user;\n            addPlace(newPlace, (err3, place) => {\n              if (err3) {\n                reject(err3);\n              }\n              resolve(place);\n            });\n          });\n        });\n      });\n    },\n  },\n};\n\nexport default resolveFunctions;\n"]}