{"version":3,"sources":["../../src/data/resolvers.js"],"names":["resolveFunctions","Query","User","root","args","Promise","resolve","reject","username","err","user","Users","find","users","Mutation","createUser","newUser","deleteUser","context","token","decoded","console","log","Error","authenticateUser","password","isMatch","access_token","token_type","expires_in","process","env","EXPIRES_IN"],"mappings":"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","file":"resolvers.js","sourcesContent":["import User, { getUserByUsername, addUser, deleteUser } from '../models/user';\nimport { createToken, comparePassword, verifyToken } from '../utils';\n\nconst resolveFunctions = {\n  Query: {\n    User(root, args) {\n      return new Promise((resolve, reject) => {\n        getUserByUsername(args.username, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(user);\n        });\n      });\n    },\n    Users(root, args) {\n      return new Promise((resolve, reject) => {\n        User.find({}, (err, users) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(users);\n        });\n      });\n    },\n  },\n  Mutation: {\n    createUser(root, args) {\n      const newUser = new User(args);\n      return new Promise((resolve, reject) => {\n        addUser(newUser, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(user);\n        });\n      });\n    },\n    deleteUser(root, args, context) {\n      return new Promise((resolve, reject) => {\n        verifyToken(args.token, (err, decoded) => {\n          console.log(err, decoded)\n          if (err) {\n            reject(err);\n          } else if (decoded.username === args.username) {\n            deleteUser(args.username, (err, user) => {\n              console.log(err, user);\n              if (err) {\n                reject(err);\n              }\n              resolve(user);\n            });\n          } else {\n            reject(new Error('Unauthorized operation'));\n          }\n\n        });\n      });\n    },\n    authenticateUser(root, args) {\n      return new Promise((resolve, reject) => {\n        getUserByUsername(args.username, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n          comparePassword(args.password, user.password, (err, isMatch) => {\n            if (err) {\n              reject(err);\n            }\n            if (!isMatch) {\n              reject(new Error('Wrong password'));\n            }\n            resolve({\n              access_token: createToken(user),\n              token_type: 'jwt',\n              expires_in: process.env.EXPIRES_IN,\n              user,\n            });\n          });\n        });\n      });\n    }\n  },\n};\n\nexport default resolveFunctions;\n"]}